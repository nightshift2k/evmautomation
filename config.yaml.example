###
# GLOBAL SETTINGS
###

# log settings
log:
    disabled: false # logging can be turned off, if desired
    filename: evmautomation.log # log file name
    level: DEBUG # DEBUG, INFO, WARN, ERROR - reduce to INFO if everything is working

# some workflows need to store persistent data
# like the amount of hydrations/claims
# to prevent losing this information, this is stored
# in a sqlite database, specified below
db_file: data.sqlite

# Settings for a EVM compatible chain
# if more workflows beside currently BSC get added
# every chain will need to have at least one entry.
chains:
    # make sure to use this key in the workflows below
    # you could specify the same chain with different
    # settings by duplicating/adjusting the settings
    # with a different key, like bsc-1, bsc-2, etc.
    bsc:
        # refresh interval of fastest rpc url.
        # Before executing any actions against the chain
        # the tool will try to find the fastest RPC url.
        # Set to 0 or false for random selection instead of speed measuring
        rpc_refresh_interval: 300 
        # all urls below will be used and tested for latency (speed),
        # fastest is chosen every run
        rpc_urls:
        - https://bsc-dataseed.binance.org
        - https://bsc-dataseed1.defibit.io
        - https://bsc-dataseed1.ninicoin.io
        - https://bsc-dataseed2.defibit.io
        - https://bsc-dataseed3.defibit.io
        - https://bsc-dataseed4.defibit.io
        - https://bsc-dataseed2.ninicoin.io
        - https://bsc-dataseed3.ninicoin.io
        - https://bsc-dataseed4.ninicoin.io
        - https://bsc-dataseed1.binance.org
        - https://bsc-dataseed2.binance.org
        - https://bsc-dataseed3.binance.org
        - https://bsc-dataseed4.binance.org
        - https://bsc.mytokenpocket.vip
        wait_for_tx: 60 # how long to wait after a transaction for block(s) confirmation

# telegram configuration
telegram: 
    disabled: true # set to false if you want telegram notifications
    bot_token: 22222222:APITOKEN # get an actual api token - talk to @botfather
    chat_id: 12345678 # talk to @userinfobot to get your user id

###
# WORKFLOW SPECIFIC SETTINGS
###

# every workflow starts with a name, following a configuration
# you can have multiple workflows of the same type, for 
# different wallets
#
# each workflow is identified by its key under workflows:
# and also by the workflow itself (so which logic to run)
# example: workflow: drip
#
# currently supported workflows:
# - dripfaucet
# - dripgarden
# - trunknative
# - trunkstampede

workflows:
    # DRIP faucet configuration
    my-drip-wallets:
        chain: bsc # specify which chain setup this workflow will use
        workflow: dripfaucet # the workflow that is applied
        disabled: true # self explanatory
        wallet_file: drip-wallets.json # encrypted wallet file for DRIP
        run_every_seconds: 3600 # default sleep time between checks
        wallet_bnb_min_balance: 0.01 # if set to 0 will actually still check if balance is enough for gas-fees
        hydration_max_gas: 650000 # max gas to use for hydration, if current gas fees are higher, it will be retried
        
        # the hydration count only makes sense to be used in conjunction
        # with claim_count. Using both enables to have an alternating schedule
        # for hydrating and claiming.
        # There is also an importance to use the hydration_table and claim_table
        # Basically it enables you to build up an available amount of tokens in %
        # and then hydrate it X times (hydration_count).
        # If the hydration_count is reached, the workflow will wait to reach the 
        # available amount specified by the claim_table and claim the tokens.
        # This also happens X times where X is the value specified under claim_count.
        # 
        # Example:
        # =======
        # hydration_count: 1
        # hydration_table:
        #     0: 0.01
        # claim_count: 1
        # claim_table:
        #     0: 0.01
        #
        # The above example will alternate between claiming and hydrating every time the 
        # available amount has reached 1% of your deposit.
        #
        # If only hydrating shall be run, set hydration_count to 1 and claim_count to 0
        #
        hydration_count: 1 # see explanation above!
        hydration_max_gas: 750000 # max gas allowed for hydrate transaction
        hydration_table: # depending on how many DRIP is deposited, when to hydrate
            1000: 0.005 # at >=1000 DRIP deposits hydrate at 0.5% avail
            100: 0.01   # at  >=100 DRIP deposits hydrate at   1% avail
            50: 0.0125  # at   >=50 DRIP deposits hydrate at 1.5% avail
            25: 0.015   # at   >=25 DRIP deposits hydrate at   3% avail
            10: 0.04    # at   >=10 DRIP deposits hydrate at   5% avail
            1: 0.1      # at    >=1 DRIP deposits hydrate at  10% avail

        claim_count: 0 # see explanation above!
        claim_max_gas: 650000 # max gas allowed for claim transaction
        claim_table:
            1: 0.05      # at    >=1 DRIP deposits claim at  5% avail

    # DRIP Garden configuration
    my-garden-wallets:
        chain: bsc # specify which chain setup this workflow will use
        workflow: dripgarden # the workflow that is applied
        disabled: true # self explanatory
        wallet_file: garden-wallets.json # encrypted wallet file for DRIP Garden
        wallet_bnb_min_balance: 0.01 # if set to 0 will actually still check if balance is enough for gas-fees
        max_gas: 250000 # max gas allowed for transaction
        plant_table: # depending how many plants you have, wait until how many plants are grown until planting
            1000: 10 # at >=1000 plants plant when 20 plants ar ready
            500: 5   # at  >=500 plants plant when  5 plants ar ready
            100: 3   # at  >=100 plants plant when  3 plants ar ready
            10: 1    # at   >=10 plants plant when  1 plants ar ready
            # else plant every 1 plant
        max_seeds_loss: 0.005 # if we don't hit spot on how many seeds of a plant can be lost in %, the more plants you have the higher you'll have to set this
        referrer: "0xd065D3CA0a13eC5A577E684BBF97a43BAF04cBf0" # referrer for the plant function, can be set to null, if you use mine, this will give some rewards to my wallet
        sleep_time: 10 # sleep between checks, the more plants you have the lower you should set it, avoid 0 for overloading the system

    # Elephant TRUNK/Stampede configuration
    my-stampede-wallets:
        chain: bsc # specify which chain setup this workflow will use
        workflow: trunkstampede # the workflow that is applied
        disabled: true # self explanatory
        wallet_file: stampede-wallets.json # encrypted wallet file for TRUNK/STAMPEDE
        run_every_seconds: 3600 # default sleep time between checks
        wallet_bnb_min_balance: 0.01 # if set to 0 will actually still check if balance is enough for gas-fees
        max_gas: 350000 # max gas allowed for transaction
        roll_table: # depending on how many TRUNK is deposited, when to roll
            5000: 0.0056 # at >= 5000 TRUNK deposits roll at 0.56% avail
            2000: 0.01   # at >= 2500 TRUNK deposits roll at    1% avail
            500: 0.03    # at  >= 500 TRUNK deposits roll at    3% avail
            100: 0.04    # at  >= 100 TRUNK deposits roll at    4% avail
            50: 0.05     # at   >= 50 TRUNK deposits roll at    5% avail
            1: 0.1       # at    >= 1 TRUNK deposits roll at   10% avail

    my-trunkstaking-wallets:
        chain: bsc # specify which chain setup this workflow will use
        workflow: trunknative # the workflow that is applied
        disabled: true # self explanatory
        wallet_file: stampede-wallets.json # encrypted wallet file for TRUNK native staking
        run_every_seconds: 3600 # default sleep time between checks
        wallet_bnb_min_balance: 0.01 # if set to 0 will actually still check if balance is enough for gas-fees
        max_gas: 350000 # max gas allowed for transaction
        reinvest_table: # depending on how many TRUNK is deposited, when to roll
            1: 0.005     # at >= 1 TRUNK reinvest at 0.5% available
